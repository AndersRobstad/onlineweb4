eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgcmVzdG9yZS1jYWNoZToKICAgIGltYWdlOiBkcmlsbHN0ZXIvZHJvbmUtdm9sdW1lLWNhY2hlCiAgICB3aGVuOgogICAgICBldmVudDogcHVsbF9yZXF1ZXN0CiAgICByZXN0b3JlOiB0cnVlCiAgICBtb3VudDoKICAgICAgLSAvdXNyL2xvY2FsL2xpYi9weXRob24zLjUvc2l0ZS1wYWNrYWdlcy8KICAgICAgLSAuL25vZGVfbW9kdWxlcwogICAgdm9sdW1lczoKICAgICAgLSAvdG1wL2NhY2hlOi9jYWNoZQoKICB0ZXN0OgogICAgaW1hZ2U6IHJlZ2lzdHJ5Lm9ubGluZS5udG51Lm5vL2RvdGtvbS9vbmxpbmV3ZWI0LXRlc3RiYXNlCiAgICB3aGVuOgogICAgICBldmVudDogcHVsbF9yZXF1ZXN0CiAgICBjb21tYW5kczoKICAgICAgLSBjcCBvbmxpbmV3ZWI0L3NldHRpbmdzL2V4YW1wbGUtbG9jYWwucHkgb25saW5ld2ViNC9zZXR0aW5ncy9sb2NhbC5weQogICAgICAtIG5wbSBpbnN0YWxsIC0tZGVwdGg9MCAtLXF1aWV0CiAgICAgIC0gcGlwIGluc3RhbGwgLXIgcmVxdWlyZW1lbnRzLnR4dCAtciByZXF1aXJlbWVudHMtdGVzdGluZy50eHQgLS1xdWlldAogICAgICAtIHB5dGhvbiB3ZWJwYWNrX3Jlc29sdmUucHkKICAgICAgLSBucG0gcnVuIGJ1aWxkOnByb2QKICAgICAgLSBucG0gcnVuIGxpbnQKICAgICAgLSBpc29ydCAtYyAtcmMgYXBwcyBtaWRkbGV3YXJlIHNjcmlwdHMgdXRpbHMKICAgICAgLSBmbGFrZTggYXBwcyBtaWRkbGV3YXJlIHNjcmlwdHMgdXRpbHMKICAgICAgLSBweS50ZXN0IC0tY292PWFwcHMKICAgICAgLSBwaXAgaW5zdGFsbCBjb2RlY292IC0tcXVpZXQKICAgICAgLSBjb2RlY292CgogIHJlc3RvcmUtY2FjaGU6CiAgICBpbWFnZTogZHJpbGxzdGVyL2Ryb25lLXZvbHVtZS1jYWNoZQogICAgd2hlbjoKICAgICAgZXZlbnQ6IHB1bGxfcmVxdWVzdAogICAgcmVidWlsZDogdHJ1ZQogICAgbW91bnQ6CiAgICAgIC0gL3Vzci9sb2NhbC9saWIvcHl0aG9uMy41L3NpdGUtcGFja2FnZXMvCiAgICAgIC0gLi9ub2RlX21vZHVsZXMKICAgIHZvbHVtZXM6CiAgICAgIC0gL3RtcC9jYWNoZTovY2FjaGUKCiAgZGVwbG95OgogICAgaW1hZ2U6IHBsdWdpbnMvc3NoCiAgICBob3N0OiBuYW5zZW4ub25saW5lLm50bnUubm8KICAgIHVzZXI6IHJvb3QKICAgIHBvcnQ6IDIyCiAgICB3aGVuOgogICAgICBldmVudDogcHVzaAogICAgICBicmFuY2g6IGRldmVsb3AKICAgIHNjcmlwdDoKICAgICAgLSAvc3J2L3d3dy9vdzRkZXYvZGVwbG95LnNoCg.vLZWS3wEpt_GwYDfB8ml3AKAAujmU10Bf5hCE3HlimM